// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stripe

import (
	"context"
	"reflect"

	"errors"
	"github.com/georgegebbett/pulumi-stripe/sdk/go/stripe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// With this resource, you can create Entitlements Feature for your products - [Stripe API entitlements feature documentation](https://docs.stripe.com/api/entitlements/feature)
//
// Entitlements Features can be assigned to products, and when those products are purchased,
// Stripe will create an entitlement to the feature for the purchasing customer.
//
// > Removal of the Entitlements Feature isn't supported through the Stripe SDK. Consequently, deactivation is applied instead.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/georgegebbett/pulumi-stripe/sdk/go/stripe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Entitlements Feature
//			_, err := stripe.NewEntitlementsFeature(ctx, "feature", &stripe.EntitlementsFeatureArgs{
//				LookupKey: pulumi.String("key"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import stripe:index/entitlementsFeature:EntitlementsFeature feature <feature_id>
// ```
type EntitlementsFeature struct {
	pulumi.CustomResourceState

	// Inactive features cannot be attached to new products.
	Active pulumi.BoolOutput `pulumi:"active"`
	// Bool. Has the value `true` if the object exists in live mode or the value `false`
	// if the object exists in test mode.
	Livemode pulumi.BoolOutput `pulumi:"livemode"`
	// String. A unique key you provide as your own system identifier. This may be up to 80 characters.
	LookupKey pulumi.StringOutput `pulumi:"lookupKey"`
	// Map(String). Set of key-value pairs that you can attach to an object.
	// This can be useful for storing additional information about the object in a structured format.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// String. The feature’s name, for your own purpose, not meant to be displayable to the customer.
	Name pulumi.StringOutput `pulumi:"name"`
	// String representing the object’s type. Objects of the same type share the same value.
	Object pulumi.StringOutput `pulumi:"object"`
}

// NewEntitlementsFeature registers a new resource with the given unique name, arguments, and options.
func NewEntitlementsFeature(ctx *pulumi.Context,
	name string, args *EntitlementsFeatureArgs, opts ...pulumi.ResourceOption) (*EntitlementsFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LookupKey == nil {
		return nil, errors.New("invalid value for required argument 'LookupKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EntitlementsFeature
	err := ctx.RegisterResource("stripe:index/entitlementsFeature:EntitlementsFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntitlementsFeature gets an existing EntitlementsFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntitlementsFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntitlementsFeatureState, opts ...pulumi.ResourceOption) (*EntitlementsFeature, error) {
	var resource EntitlementsFeature
	err := ctx.ReadResource("stripe:index/entitlementsFeature:EntitlementsFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntitlementsFeature resources.
type entitlementsFeatureState struct {
	// Inactive features cannot be attached to new products.
	Active *bool `pulumi:"active"`
	// Bool. Has the value `true` if the object exists in live mode or the value `false`
	// if the object exists in test mode.
	Livemode *bool `pulumi:"livemode"`
	// String. A unique key you provide as your own system identifier. This may be up to 80 characters.
	LookupKey *string `pulumi:"lookupKey"`
	// Map(String). Set of key-value pairs that you can attach to an object.
	// This can be useful for storing additional information about the object in a structured format.
	Metadata map[string]string `pulumi:"metadata"`
	// String. The feature’s name, for your own purpose, not meant to be displayable to the customer.
	Name *string `pulumi:"name"`
	// String representing the object’s type. Objects of the same type share the same value.
	Object *string `pulumi:"object"`
}

type EntitlementsFeatureState struct {
	// Inactive features cannot be attached to new products.
	Active pulumi.BoolPtrInput
	// Bool. Has the value `true` if the object exists in live mode or the value `false`
	// if the object exists in test mode.
	Livemode pulumi.BoolPtrInput
	// String. A unique key you provide as your own system identifier. This may be up to 80 characters.
	LookupKey pulumi.StringPtrInput
	// Map(String). Set of key-value pairs that you can attach to an object.
	// This can be useful for storing additional information about the object in a structured format.
	Metadata pulumi.StringMapInput
	// String. The feature’s name, for your own purpose, not meant to be displayable to the customer.
	Name pulumi.StringPtrInput
	// String representing the object’s type. Objects of the same type share the same value.
	Object pulumi.StringPtrInput
}

func (EntitlementsFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*entitlementsFeatureState)(nil)).Elem()
}

type entitlementsFeatureArgs struct {
	// String. A unique key you provide as your own system identifier. This may be up to 80 characters.
	LookupKey string `pulumi:"lookupKey"`
	// Map(String). Set of key-value pairs that you can attach to an object.
	// This can be useful for storing additional information about the object in a structured format.
	Metadata map[string]string `pulumi:"metadata"`
	// String. The feature’s name, for your own purpose, not meant to be displayable to the customer.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a EntitlementsFeature resource.
type EntitlementsFeatureArgs struct {
	// String. A unique key you provide as your own system identifier. This may be up to 80 characters.
	LookupKey pulumi.StringInput
	// Map(String). Set of key-value pairs that you can attach to an object.
	// This can be useful for storing additional information about the object in a structured format.
	Metadata pulumi.StringMapInput
	// String. The feature’s name, for your own purpose, not meant to be displayable to the customer.
	Name pulumi.StringPtrInput
}

func (EntitlementsFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entitlementsFeatureArgs)(nil)).Elem()
}

type EntitlementsFeatureInput interface {
	pulumi.Input

	ToEntitlementsFeatureOutput() EntitlementsFeatureOutput
	ToEntitlementsFeatureOutputWithContext(ctx context.Context) EntitlementsFeatureOutput
}

func (*EntitlementsFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**EntitlementsFeature)(nil)).Elem()
}

func (i *EntitlementsFeature) ToEntitlementsFeatureOutput() EntitlementsFeatureOutput {
	return i.ToEntitlementsFeatureOutputWithContext(context.Background())
}

func (i *EntitlementsFeature) ToEntitlementsFeatureOutputWithContext(ctx context.Context) EntitlementsFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitlementsFeatureOutput)
}

// EntitlementsFeatureArrayInput is an input type that accepts EntitlementsFeatureArray and EntitlementsFeatureArrayOutput values.
// You can construct a concrete instance of `EntitlementsFeatureArrayInput` via:
//
//	EntitlementsFeatureArray{ EntitlementsFeatureArgs{...} }
type EntitlementsFeatureArrayInput interface {
	pulumi.Input

	ToEntitlementsFeatureArrayOutput() EntitlementsFeatureArrayOutput
	ToEntitlementsFeatureArrayOutputWithContext(context.Context) EntitlementsFeatureArrayOutput
}

type EntitlementsFeatureArray []EntitlementsFeatureInput

func (EntitlementsFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntitlementsFeature)(nil)).Elem()
}

func (i EntitlementsFeatureArray) ToEntitlementsFeatureArrayOutput() EntitlementsFeatureArrayOutput {
	return i.ToEntitlementsFeatureArrayOutputWithContext(context.Background())
}

func (i EntitlementsFeatureArray) ToEntitlementsFeatureArrayOutputWithContext(ctx context.Context) EntitlementsFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitlementsFeatureArrayOutput)
}

// EntitlementsFeatureMapInput is an input type that accepts EntitlementsFeatureMap and EntitlementsFeatureMapOutput values.
// You can construct a concrete instance of `EntitlementsFeatureMapInput` via:
//
//	EntitlementsFeatureMap{ "key": EntitlementsFeatureArgs{...} }
type EntitlementsFeatureMapInput interface {
	pulumi.Input

	ToEntitlementsFeatureMapOutput() EntitlementsFeatureMapOutput
	ToEntitlementsFeatureMapOutputWithContext(context.Context) EntitlementsFeatureMapOutput
}

type EntitlementsFeatureMap map[string]EntitlementsFeatureInput

func (EntitlementsFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntitlementsFeature)(nil)).Elem()
}

func (i EntitlementsFeatureMap) ToEntitlementsFeatureMapOutput() EntitlementsFeatureMapOutput {
	return i.ToEntitlementsFeatureMapOutputWithContext(context.Background())
}

func (i EntitlementsFeatureMap) ToEntitlementsFeatureMapOutputWithContext(ctx context.Context) EntitlementsFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitlementsFeatureMapOutput)
}

type EntitlementsFeatureOutput struct{ *pulumi.OutputState }

func (EntitlementsFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntitlementsFeature)(nil)).Elem()
}

func (o EntitlementsFeatureOutput) ToEntitlementsFeatureOutput() EntitlementsFeatureOutput {
	return o
}

func (o EntitlementsFeatureOutput) ToEntitlementsFeatureOutputWithContext(ctx context.Context) EntitlementsFeatureOutput {
	return o
}

// Inactive features cannot be attached to new products.
func (o EntitlementsFeatureOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *EntitlementsFeature) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// Bool. Has the value `true` if the object exists in live mode or the value `false`
// if the object exists in test mode.
func (o EntitlementsFeatureOutput) Livemode() pulumi.BoolOutput {
	return o.ApplyT(func(v *EntitlementsFeature) pulumi.BoolOutput { return v.Livemode }).(pulumi.BoolOutput)
}

// String. A unique key you provide as your own system identifier. This may be up to 80 characters.
func (o EntitlementsFeatureOutput) LookupKey() pulumi.StringOutput {
	return o.ApplyT(func(v *EntitlementsFeature) pulumi.StringOutput { return v.LookupKey }).(pulumi.StringOutput)
}

// Map(String). Set of key-value pairs that you can attach to an object.
// This can be useful for storing additional information about the object in a structured format.
func (o EntitlementsFeatureOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntitlementsFeature) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// String. The feature’s name, for your own purpose, not meant to be displayable to the customer.
func (o EntitlementsFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EntitlementsFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// String representing the object’s type. Objects of the same type share the same value.
func (o EntitlementsFeatureOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v *EntitlementsFeature) pulumi.StringOutput { return v.Object }).(pulumi.StringOutput)
}

type EntitlementsFeatureArrayOutput struct{ *pulumi.OutputState }

func (EntitlementsFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntitlementsFeature)(nil)).Elem()
}

func (o EntitlementsFeatureArrayOutput) ToEntitlementsFeatureArrayOutput() EntitlementsFeatureArrayOutput {
	return o
}

func (o EntitlementsFeatureArrayOutput) ToEntitlementsFeatureArrayOutputWithContext(ctx context.Context) EntitlementsFeatureArrayOutput {
	return o
}

func (o EntitlementsFeatureArrayOutput) Index(i pulumi.IntInput) EntitlementsFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EntitlementsFeature {
		return vs[0].([]*EntitlementsFeature)[vs[1].(int)]
	}).(EntitlementsFeatureOutput)
}

type EntitlementsFeatureMapOutput struct{ *pulumi.OutputState }

func (EntitlementsFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntitlementsFeature)(nil)).Elem()
}

func (o EntitlementsFeatureMapOutput) ToEntitlementsFeatureMapOutput() EntitlementsFeatureMapOutput {
	return o
}

func (o EntitlementsFeatureMapOutput) ToEntitlementsFeatureMapOutputWithContext(ctx context.Context) EntitlementsFeatureMapOutput {
	return o
}

func (o EntitlementsFeatureMapOutput) MapIndex(k pulumi.StringInput) EntitlementsFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EntitlementsFeature {
		return vs[0].(map[string]*EntitlementsFeature)[vs[1].(string)]
	}).(EntitlementsFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntitlementsFeatureInput)(nil)).Elem(), &EntitlementsFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntitlementsFeatureArrayInput)(nil)).Elem(), EntitlementsFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntitlementsFeatureMapInput)(nil)).Elem(), EntitlementsFeatureMap{})
	pulumi.RegisterOutputType(EntitlementsFeatureOutput{})
	pulumi.RegisterOutputType(EntitlementsFeatureArrayOutput{})
	pulumi.RegisterOutputType(EntitlementsFeatureMapOutput{})
}
